{"version":3,"sources":["App.js","components/Key.js","components/Keypad.js","logo.svg","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","C_Users_PC_Desktop_freecodecamp_free_react_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","inputArr","setInputArr","_useState3","_useState4","currentInput","setCurrentInput","isFloat","num","Number","decimal","numStr","toString","numIsFloat","numStrArr","split","length","concat","operatorArr","calculate","isValidNumber","calcArr","C_Users_PC_Desktop_freecodecamp_free_react_calculator_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","calculated","eval","join","clear","isOperator","value","includes","isNaN","currentInputHandler","newInput","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","className","id","_components_Keypad__WEBPACK_IMPORTED_MODULE_5__","Key","_ref","keyItem","react_default","onClick","Keypad","name","map","operatorKey","components_Key","key","numKey","module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cc127e1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Keypad from './components/Keypad';\nconst App = () => {\n  const [inputArr, setInputArr] = useState([]);\n  const [currentInput, setCurrentInput] = useState('0');\n  const isFloat = num => Number(num) === num && num % 1 !== 0;\n  const decimal = numStr => {\n    numStr = numStr.toString();\n    const numIsFloat = isFloat(Number(numStr));\n    const numStrArr = numStr.split('');\n    if (!numIsFloat && numStrArr[numStrArr.length - 1] !== '.') {\n      setCurrentInput(`${numStr}.`);\n    }\n  };\n  const operatorArr = ['+', '/', '-', '*'];\n  const calculate = () => {\n    if (isValidNumber(currentInput)) {\n      let calcArr = [...inputArr, currentInput];\n      const calculated = eval(calcArr.join(''));\n      setCurrentInput(calculated);\n      setInputArr(['']);\n    }\n  };\n  const clear = () => {\n    setCurrentInput('0');\n    setInputArr([]);\n  };\n  const isOperator = value => operatorArr.includes(value);\n  const isValidNumber = value =>\n    typeof Number(value) === 'number' && !isNaN(Number(value));\n  const currentInputHandler = newInput => {\n    if (isValidNumber(newInput)) {\n      if (isOperator(currentInput)) {\n        setInputArr([...inputArr, currentInput]);\n        setCurrentInput(newInput);\n      } else if (currentInput === '0') {\n        setCurrentInput(`${newInput}`);\n      } else {\n        setCurrentInput(`${currentInput}${newInput}`);\n      }\n    } else if (isOperator(newInput)) {\n      if (!isOperator(currentInput)) {\n        setInputArr([...inputArr, currentInput]);\n      }\n      setCurrentInput(newInput);\n    } else if (newInput === '.') {\n      decimal(currentInput);\n    } else if (newInput === '=') {\n      calculate();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"main-container\">\n        <div id=\"display-calculations\">{inputArr.join(' ')}</div>\n        <div id=\"display\">{currentInput}</div>\n        <Keypad clear={clear} currentInputHandler={currentInputHandler} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React, { useState } from 'react';\r\nconst Key = ({ keyItem, currentInputHandler, id }) => {\r\n  return (\r\n    <button\r\n      id={id}\r\n      onClick={() => currentInputHandler(keyItem.value)}\r\n      className=\"Key\"\r\n    >\r\n      {keyItem.value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Key;\r\n","import React, { useState } from 'react';\r\nimport Key from './Key';\r\nconst Keypad = ({ currentInputHandler, clear }) => {\r\n  const numbers = [\r\n    { name: 'zero', value: 0 },\r\n    { name: 'one', value: 1 },\r\n    { name: 'two', value: 2 },\r\n    { name: 'three', value: 3 },\r\n    { name: 'four', value: 4 },\r\n    { name: 'five', value: 5 },\r\n    { name: 'six', value: 6 },\r\n    { name: 'seven', value: 7 },\r\n    { name: 'eight', value: 8 },\r\n    { name: 'nine', value: 9 }\r\n  ];\r\n  const operators = [\r\n    { name: 'add', value: '+' },\r\n    { name: 'subtract', value: '-' },\r\n    { name: 'multiply', value: '*' },\r\n    { name: 'divide', value: '/' },\r\n    { name: 'equals', value: '=' }\r\n  ];\r\n  return (\r\n    <div className=\"keypad\">\r\n      <div className=\"keypad-buttons\">\r\n        {operators.map(operatorKey => (\r\n          <Key\r\n            id={operatorKey.name}\r\n            key={operatorKey.name}\r\n            keyItem={operatorKey}\r\n            currentInputHandler={currentInputHandler}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"keypad-buttons\">\r\n        {numbers.map(numKey => (\r\n          <Key\r\n            id={numKey.name}\r\n            key={numKey.name}\r\n            keyItem={numKey}\r\n            currentInputHandler={currentInputHandler}\r\n          />\r\n        ))}\r\n        <Key\r\n          id=\"decimal\"\r\n          key={'decimal'}\r\n          keyItem={{ name: 'decimal', value: '.' }}\r\n          currentInputHandler={currentInputHandler}\r\n        />\r\n        <Key\r\n          id=\"clear\"\r\n          key={'clear'}\r\n          keyItem={{ name: 'AC', value: 'AC' }}\r\n          currentInputHandler={clear}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Keypad;\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}